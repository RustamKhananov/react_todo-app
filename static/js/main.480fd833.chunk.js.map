{"version":3,"sources":["ToDoItem.js","ListToDo.js","App.js","index.js"],"names":["ToDoItem","props","liClassName","todo","id","description","isActive","isEdited","handleIsActiveChange","handleEditFieldChange","deleteToDo","handleItemDoubleClick","handleEditEnter","key","className","type","checked","onChange","onDoubleClick","htmlFor","onClick","value","onKeyDown","onBlur","ListToDo","todos","map","App","state","nextId","typeOfFilter","isAllButtonActive","isActiveButtonActive","isComplitedButtonActive","isToggleAll","fieldValue","isAnyEditedField","event","target","parentElement","indexOfElement","findIndex","item","parseInt","setState","prevState","tempTodos","trigger","length","filter","addNewToDo","trim","changeAddField","indexOfDeletedElement","splice","clearComplited","setFilterToAll","setFilterToActive","setFilterToCompleted","handleToggleAllChange","tempIsToggleAll","tempItem","localStorage","getItem","initState","JSON","parse","isComplitedButtonActiv","this","setItem","stringify","filteredTodos","activeItemCount","onSubmit","placeholder","changeToDo","handleChangeToDo","href","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.480fd833.chunk.js","sourcesContent":["\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ToDoItem = (props) => {\n  let liClassName = '';\n  const { id, description, isActive, isEdited } = props.todo;\n  const { handleIsActiveChange,\n    handleEditFieldChange,\n    deleteToDo,\n    handleItemDoubleClick,\n    handleEditEnter } = props;\n\n  if (isActive) {\n    liClassName = 'view';\n  } else {\n    liClassName = 'completed';\n  }\n\n  if (isEdited) {\n    liClassName = 'editing';\n  }\n\n  return (\n    <li key={id} className={liClassName} id={id}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={!isActive}\n          id={`todo-${id}`}\n          onChange={handleIsActiveChange}\n        />\n        <label\n          onDoubleClick={handleItemDoubleClick}\n          htmlFor={`todo-${id}`}\n        >\n          {description}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={deleteToDo}\n        />\n      </div>\n      <input\n        value={description}\n        type=\"text\"\n        className=\"edit\"\n        onChange={handleEditFieldChange}\n        onKeyDown={handleEditEnter}\n        onBlur={handleEditEnter}\n      />\n    </li>\n  );\n};\n\nToDoItem.propTypes = {\n  todo: PropTypes.shape({\n    description: PropTypes.string.isRequired,\n    isActive: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n    isEdited: PropTypes.bool.isRequired,\n  }).isRequired,\n  handleIsActiveChange: PropTypes.func.isRequired,\n  deleteToDo: PropTypes.func.isRequired,\n  handleItemDoubleClick: PropTypes.func.isRequired,\n  handleEditEnter: PropTypes.func.isRequired,\n  handleEditFieldChange: PropTypes.func.isRequired,\n};\n\nexport default ToDoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ToDoItem from './ToDoItem';\n\nconst ListToDo = (props) => {\n  const {\n    todos,\n    handleEditFieldChange,\n    deleteToDo,\n    handleIsActiveChange,\n    handleItemDoubleClick,\n    handleEditEnter,\n  } = props;\n\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <ToDoItem\n          key={todo.id}\n          todo={todo}\n          handleIsActiveChange={handleIsActiveChange}\n          deleteToDo={deleteToDo}\n          handleItemDoubleClick={handleItemDoubleClick}\n          handleEditEnter={handleEditEnter}\n          handleEditFieldChange={handleEditFieldChange}\n        />\n      ))\n      }\n    </ul>\n  );\n};\n\nListToDo.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    description: PropTypes.string.isRequired,\n    isActive: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n    isEdited: PropTypes.bool.isRequired,\n  })).isRequired,\n  handleIsActiveChange: PropTypes.func.isRequired,\n  deleteToDo: PropTypes.func.isRequired,\n  handleItemDoubleClick: PropTypes.func.isRequired,\n  handleEditEnter: PropTypes.func.isRequired,\n  handleEditFieldChange: PropTypes.func.isRequired,\n};\n\nexport default ListToDo;\n","import React from 'react';\nimport ListToDo from './ListToDo';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    nextId: 1,\n    typeOfFilter: 'all',\n    isAllButtonActive: true,\n    isActiveButtonActive: false,\n    isComplitedButtonActive: false,\n    isToggleAll: true,\n    fieldValue: '',\n    isAnyEditedField: false,\n  }\n\n  componentDidMount() {\n    if (!localStorage.getItem('ToDoAppData')) {\n      return;\n    }\n\n    const initState = JSON.parse(localStorage.getItem('ToDoAppData'));\n    const {\n      todos,\n      nextId,\n      typeOfFilter,\n      isAllButtonActive,\n      isActiveButtonActive,\n      isComplitedButtonActiv,\n      isToggleAll,\n      fieldValue,\n    } = initState;\n\n    this.setState({\n      todos,\n      nextId,\n      typeOfFilter,\n      isAllButtonActive,\n      isActiveButtonActive,\n      isComplitedButtonActiv,\n      isToggleAll,\n      fieldValue,\n    });\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('ToDoAppData', JSON.stringify(this.state));\n  }\n\n  handleIsActiveChange = (event) => {\n    // const { todos } = this.state;\n    //   this.setState(prevState => ({\n    //     isToggleAll: !prevState.isToggleAll,\n    //   }));\n    // }\n    const { id } = event.target.parentElement.parentElement;\n    const indexOfElement = this.state.todos.findIndex(item => (\n      item.id === parseInt(id, 10)));\n\n    this.setState((prevState) => {\n      const tempTodos = [...prevState.todos];\n\n      tempTodos[indexOfElement].isActive = !tempTodos[indexOfElement].isActive;\n      const trigger = (\n        tempTodos.length === tempTodos.filter(item => item.isActive).length\n      );\n\n      return (\n        {\n          todos: [...tempTodos],\n          isToggleAll: trigger,\n        }\n\n      );\n    });\n  }\n\n  addNewToDo = (event) => {\n    if (this.state.fieldValue.trim() !== '') {\n      this.setState(prevState => ({\n        todos: [\n          ...prevState.todos,\n          {\n            description: prevState.fieldValue,\n            isActive: true,\n            id: prevState.nextId,\n            isEdited: false,\n          },\n        ],\n        nextId: prevState.nextId + 1,\n        fieldValue: '',\n      }));\n    }\n  }\n\n  changeAddField = (event) => {\n    const { value } = event.target;\n\n    this.setState({ fieldValue: value });\n  }\n\n  deleteToDo = (event) => {\n    const { id } = event.target.parentElement.parentElement;\n    const indexOfDeletedElement = this\n      .state\n      .todos\n      .findIndex(item => (item.id === parseInt(id, 10)));\n\n    this.setState((prevState) => {\n      const tempTodos = [...prevState.todos];\n\n      tempTodos.splice(indexOfDeletedElement, 1);\n\n      return (\n        {\n          todos: [...tempTodos],\n        }\n      );\n    });\n  }\n\n  clearComplited = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(item => item.isActive),\n    }));\n  }\n\n  setFilterToAll = (event) => {\n    this.setState({\n      typeOfFilter: 'all',\n      isAllButtonActive: true,\n      isActiveButtonActive: false,\n      isComplitedButtonActive: false,\n    });\n  }\n\n  setFilterToActive = (event) => {\n    this.setState({\n      typeOfFilter: 'active',\n      isAllButtonActive: false,\n      isActiveButtonActive: true,\n      isComplitedButtonActive: false,\n    });\n  }\n\n  setFilterToCompleted = (event) => {\n    this.setState({\n      typeOfFilter: 'completed',\n      isAllButtonActive: false,\n      isActiveButtonActive: false,\n      isComplitedButtonActive: true,\n    });\n  }\n\n  handleToggleAllChange = () => {\n    const tempIsToggleAll = this.state.isToggleAll;\n\n    this.setState(prevState => ({\n      todos: prevState.todos.map((item) => {\n        const tempItem = { ...item };\n\n        tempItem.isActive = !tempIsToggleAll;\n\n        return tempItem;\n      }),\n      isToggleAll: !tempIsToggleAll,\n    }));\n  }\n\n  handleItemDoubleClick = (event) => {\n    if (this.state.isAnyEditedField) {\n      return;\n    }\n\n    const { id } = event.target.parentElement.parentElement;\n    const indexOfElement = this\n      .state\n      .todos\n      .findIndex(item => (item.id === parseInt(id, 10)));\n\n    this.setState((prevState) => {\n      const tempTodos = [...prevState.todos];\n\n      tempTodos[indexOfElement].isEdited = !tempTodos[indexOfElement].isEdited;\n\n      return (\n        {\n          todos: [...tempTodos],\n          isAnyEditedField: true,\n        }\n      );\n    });\n  }\n\n  handleEditEnter = (event) => {\n    if (event.key !== 'Enter' && event.type !== 'blur') {\n      return;\n    }\n\n    if (event.target.value.trim() === '') {\n      return;\n    }\n\n    const { id } = event.target.parentElement;\n    const indexOfElement = this\n      .state\n      .todos\n      .findIndex(item => (item.id === parseInt(id, 10)));\n\n    this.setState((prevState) => {\n      const tempTodos = [...prevState.todos];\n\n      tempTodos[indexOfElement].isEdited = false;\n\n      return (\n        {\n          todos: [...tempTodos],\n          isAnyEditedField: false,\n        }\n      );\n    });\n  }\n\n  handleEditFieldChange = (event) => {\n    const { id } = event.target.parentElement;\n    const indexOfElement = this\n      .state\n      .todos\n      .findIndex(item => (item.id === parseInt(id, 10)));\n    const { value } = event.target;\n\n    this.setState((prevState) => {\n      const tempTodos = [...prevState.todos];\n\n      tempTodos[indexOfElement].description = value;\n\n      return (\n        {\n          todos: [...tempTodos],\n\n        }\n      );\n    });\n  }\n\n  render() {\n    let filteredTodos = [...this.state.todos];\n\n    if (this.state.typeOfFilter === 'active') {\n      filteredTodos = this.state.todos.filter(item => item.isActive);\n    }\n\n    if (this.state.typeOfFilter === 'completed') {\n      filteredTodos = this.state.todos.filter(item => !item.isActive);\n    }\n\n    const activeItemCount = this\n      .state\n      .todos\n      .filter(item => item.isActive).length;\n\n    const {\n      isActiveButtonActive,\n      fieldValue,\n      isAllButtonActive,\n      isComplitedButtonActive,\n      isToggleAll,\n    } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form onSubmit={this.addNewToDo}>\n            <input\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              onChange={this.changeAddField}\n              value={fieldValue}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n          <input\n            onChange={this.handleToggleAllChange}\n            checked={isToggleAll}\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <ListToDo\n            todos={filteredTodos}\n            changeToDo={this.handleChangeToDo}\n            deleteToDo={this.deleteToDo}\n            handleIsActiveChange={this.handleIsActiveChange}\n            handleItemDoubleClick={this.handleItemDoubleClick}\n            handleEditEnter={this.handleEditEnter}\n            handleEditFieldChange={this.handleEditFieldChange}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {activeItemCount}\n            {' '}\n            items left\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <a\n                href=\"#/\"\n                className={isAllButtonActive ? 'selected' : ''}\n                onClick={this.setFilterToAll}\n              >\n                All\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/active\"\n                className={isActiveButtonActive ? 'selected' : ''}\n                onClick={this.setFilterToActive}\n              >\n                Active\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/completed\"\n                className={isComplitedButtonActive ? 'selected' : ''}\n                onClick={this.setFilterToCompleted}\n              >\n                Completed\n              </a>\n            </li>\n          </ul>\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clearComplited}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}