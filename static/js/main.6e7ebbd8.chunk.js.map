{"version":3,"sources":["ToDoItem.js","ListToDo.js","App.js","index.js"],"names":["ToDoItem","props","liClassName","todo","id","description","isActive","isEdited","handleIsActiveChange","handleEditFieldChange","deleteToDo","handleItemDoubleClick","handleEditEnter","key","className","type","checked","onChange","onDoubleClick","htmlFor","onClick","value","event","onKeyDown","onBlur","ListToDo","todos","map","App","state","nextId","typeOfFilter","isAllButtonActive","isActiveButtonActive","isCompletedButtonActive","isToggleAll","fieldValue","isAnyEditedField","vertionOfLocalStorage","checkerOfToggleAllState","setState","prevState","length","filter","item","indexOfElement","findIndex","parseInt","tempTodos","addNewToDo","preventDefault","trim","changeAddField","target","indexOfDeletedElement","splice","clearComplited","setFilterToAll","setFilterToActive","setFilterToCompleted","handleToggleAllChange","tempIsToggleAll","tempItem","initState","JSON","parse","localStorage","getItem","this","setItem","stringify","filteredTodos","activeItemCount","onSubmit","placeholder","changeToDo","handleChangeToDo","href","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e7ebbd8.chunk.js","sourcesContent":["\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ToDoItem = (props) => {\n  let liClassName = '';\n  const { id, description, isActive, isEdited } = props.todo;\n  const { handleIsActiveChange,\n    handleEditFieldChange,\n    deleteToDo,\n    handleItemDoubleClick,\n    handleEditEnter } = props;\n\n  if (isActive) {\n    liClassName = 'view';\n  } else {\n    liClassName = 'completed';\n  }\n\n  if (isEdited) {\n    liClassName = 'editing';\n  }\n\n  return (\n    <li key={id} className={liClassName} id={id}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={!isActive}\n          id={`todo-${id}`}\n          onChange={() => (handleIsActiveChange(id))}\n        />\n        <label\n          onDoubleClick={() => (handleItemDoubleClick(id))}\n          htmlFor={`todo-${id}`}\n        >\n          {description}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => (deleteToDo(id))}\n        />\n      </div>\n      <input\n        value={description}\n        type=\"text\"\n        className=\"edit\"\n        onChange={event => handleEditFieldChange(event, id)}\n        onKeyDown={event => (handleEditEnter(event, id))}\n        onBlur={event => (handleEditEnter(event, id))}\n      />\n    </li>\n  );\n};\n\nToDoItem.propTypes = {\n  todo: PropTypes.shape({\n    description: PropTypes.string.isRequired,\n    isActive: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n    isEdited: PropTypes.bool.isRequired,\n  }).isRequired,\n  handleIsActiveChange: PropTypes.func.isRequired,\n  deleteToDo: PropTypes.func.isRequired,\n  handleItemDoubleClick: PropTypes.func.isRequired,\n  handleEditEnter: PropTypes.func.isRequired,\n  handleEditFieldChange: PropTypes.func.isRequired,\n};\n\nexport default ToDoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ToDoItem from './ToDoItem';\n\nconst ListToDo = (props) => {\n  const {\n    todos,\n    handleEditFieldChange,\n    deleteToDo,\n    handleIsActiveChange,\n    handleItemDoubleClick,\n    handleEditEnter,\n  } = props;\n\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <ToDoItem\n          key={todo.id}\n          todo={todo}\n          handleIsActiveChange={handleIsActiveChange}\n          deleteToDo={deleteToDo}\n          handleItemDoubleClick={handleItemDoubleClick}\n          handleEditEnter={handleEditEnter}\n          handleEditFieldChange={handleEditFieldChange}\n        />\n      ))\n      }\n    </ul>\n  );\n};\n\nListToDo.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    description: PropTypes.string.isRequired,\n    isActive: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n    isEdited: PropTypes.bool.isRequired,\n  })).isRequired,\n  handleIsActiveChange: PropTypes.func.isRequired,\n  deleteToDo: PropTypes.func.isRequired,\n  handleItemDoubleClick: PropTypes.func.isRequired,\n  handleEditEnter: PropTypes.func.isRequired,\n  handleEditFieldChange: PropTypes.func.isRequired,\n};\n\nexport default ListToDo;\n","import React from 'react';\nimport ListToDo from './ListToDo';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    nextId: 1,\n    typeOfFilter: 'all',\n    isAllButtonActive: true,\n    isActiveButtonActive: false,\n    isCompletedButtonActive: false,\n    isToggleAll: true,\n    fieldValue: '',\n    isAnyEditedField: false,\n    vertionOfLocalStorage: 3,\n  }\n\n  componentDidMount() {\n    const initState = JSON.parse(localStorage.getItem('ToDoAppData'));\n\n    if (initState.vertionOfLocalStorage !== this.state.vertionOfLocalStorage) {\n      return;\n    }\n\n    this.setState({\n      ...initState,\n    });\n    this.checkerOfToggleAllState();\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('ToDoAppData', JSON.stringify(this.state));\n  }\n\n  checkerOfToggleAllState = () => {\n    this.setState((prevState) => {\n      const trigger = (\n        (prevState.todos.length === prevState\n          .todos\n          .filter(item => !item.isActive)\n          .length)\n        && prevState.todos.length !== 0);\n\n      return ({\n        isToggleAll: trigger,\n      });\n    });\n  }\n\n  handleIsActiveChange = (id) => {\n    const indexOfElement = this.state.todos.findIndex(item => (\n      item.id === parseInt(id, 10)));\n\n    this.setState((prevState) => {\n      const tempTodos = [...prevState.todos];\n\n      tempTodos[indexOfElement].isActive = !tempTodos[indexOfElement].isActive;\n\n      return (\n        {\n          todos: [...tempTodos],\n        }\n\n      );\n    });\n    this.checkerOfToggleAllState();\n  }\n\n  addNewToDo = (event) => {\n    event.preventDefault();\n    if (this.state.fieldValue.trim() !== '') {\n      this.setState(prevState => ({\n        todos: [\n          ...prevState.todos,\n          {\n            description: prevState.fieldValue,\n            isActive: true,\n            id: prevState.nextId,\n            isEdited: false,\n          },\n        ],\n        nextId: prevState.nextId + 1,\n        fieldValue: '',\n      }));\n      this.checkerOfToggleAllState();\n    }\n  }\n\n  changeAddField = (event) => {\n    const { value } = event.target;\n\n    this.setState({ fieldValue: value });\n  }\n\n  deleteToDo = (id) => {\n    const indexOfDeletedElement = this\n      .state\n      .todos\n      .findIndex(item => (item.id === parseInt(id, 10)));\n\n    this.setState((prevState) => {\n      const tempTodos = [...prevState.todos];\n\n      tempTodos.splice(indexOfDeletedElement, 1);\n\n      return (\n        {\n          todos: [...tempTodos],\n        }\n      );\n    });\n    this.checkerOfToggleAllState();\n  }\n\n  clearComplited = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(item => item.isActive),\n    }));\n  }\n\n  setFilterToAll = () => {\n    this.setState({\n      typeOfFilter: 'all',\n      isAllButtonActive: true,\n      isActiveButtonActive: false,\n      isCompletedButtonActive: false,\n    });\n  }\n\n  setFilterToActive = () => {\n    this.setState({\n      typeOfFilter: 'active',\n      isAllButtonActive: false,\n      isActiveButtonActive: true,\n      isCompletedButtonActive: false,\n    });\n  }\n\n  setFilterToCompleted = () => {\n    this.setState({\n      typeOfFilter: 'completed',\n      isAllButtonActive: false,\n      isActiveButtonActive: false,\n      isCompletedButtonActive: true,\n    });\n  }\n\n  handleToggleAllChange = () => {\n    const tempIsToggleAll = this.state.isToggleAll;\n\n    this.setState(prevState => ({\n      todos: prevState.todos.map((item) => {\n        const tempItem = { ...item };\n\n        tempItem.isActive = tempIsToggleAll;\n\n        return tempItem;\n      }),\n      isToggleAll: !tempIsToggleAll,\n    }));\n    this.checkerOfToggleAllState();\n  }\n\n  handleItemDoubleClick = (id) => {\n    if (this.state.isAnyEditedField) {\n      return;\n    }\n\n    const indexOfElement = this\n      .state\n      .todos\n      .findIndex(item => (item.id === parseInt(id, 10)));\n\n    this.setState((prevState) => {\n      const tempTodos = [...prevState.todos];\n\n      tempTodos[indexOfElement].isEdited = !tempTodos[indexOfElement].isEdited;\n\n      return (\n        {\n          todos: [...tempTodos],\n          isAnyEditedField: true,\n        }\n      );\n    });\n  }\n\n  handleEditEnter = (event, id) => {\n    if (event.key !== 'Enter' && event.type !== 'blur') {\n      return;\n    }\n\n    if (event.target.value.trim() === '') {\n      return;\n    }\n\n    const indexOfElement = this\n      .state\n      .todos\n      .findIndex(item => (item.id === id));\n\n    this.setState((prevState) => {\n      const tempTodos = [...prevState.todos];\n\n      tempTodos[indexOfElement].isEdited = false;\n\n      return (\n        {\n          todos: [...tempTodos],\n          isAnyEditedField: false,\n        }\n      );\n    });\n  }\n\n  handleEditFieldChange = (event, id) => {\n    const indexOfElement = this\n      .state\n      .todos\n      .findIndex(item => (item.id === id));\n    const { value } = event.target;\n\n    this.setState((prevState) => {\n      const tempTodos = [...prevState.todos];\n\n      tempTodos[indexOfElement].description = value;\n\n      return (\n        {\n          todos: [...tempTodos],\n        }\n      );\n    });\n  }\n\n  render() {\n    let filteredTodos = [...this.state.todos];\n\n    if (this.state.typeOfFilter === 'active') {\n      filteredTodos = this.state.todos.filter(item => item.isActive);\n    }\n\n    if (this.state.typeOfFilter === 'completed') {\n      filteredTodos = this.state.todos.filter(item => !item.isActive);\n    }\n\n    const activeItemCount = this\n      .state\n      .todos\n      .filter(item => item.isActive).length;\n\n    const {\n      isActiveButtonActive,\n      fieldValue,\n      isAllButtonActive,\n      isCompletedButtonActive,\n      isToggleAll,\n    } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form onSubmit={this.addNewToDo}>\n            <input\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              onChange={this.changeAddField}\n              value={fieldValue}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n          <input\n            onChange={this.handleToggleAllChange}\n            checked={isToggleAll}\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n\n          />\n          <label\n            className={(this.state.todos.length === 0)\n              ? 'non-visible'\n              : ''\n            }\n            htmlFor=\"toggle-all\"\n          >\n            Mark all as complete\n          </label>\n          <ListToDo\n            todos={filteredTodos}\n            changeToDo={this.handleChangeToDo}\n            deleteToDo={this.deleteToDo}\n            handleIsActiveChange={this.handleIsActiveChange}\n            handleItemDoubleClick={this.handleItemDoubleClick}\n            handleEditEnter={this.handleEditEnter}\n            handleEditFieldChange={this.handleEditFieldChange}\n          />\n        </section>\n\n        <footer\n          className={(this.state.todos.length === 0)\n            ? 'footer non-visible'\n            : 'footer'\n          }\n        >\n          <span className=\"todo-count\">\n            {activeItemCount}\n            {' '}\n            items left\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <a\n                href=\"#/\"\n                className={isAllButtonActive ? 'selected' : ''}\n                onClick={this.setFilterToAll}\n              >\n                All\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/active\"\n                className={isActiveButtonActive ? 'selected' : ''}\n                onClick={this.setFilterToActive}\n              >\n                Active\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/completed\"\n                className={isCompletedButtonActive ? 'selected' : ''}\n                onClick={this.setFilterToCompleted}\n              >\n                Completed\n              </a>\n            </li>\n          </ul>\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clearComplited}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}