{"version":3,"sources":["ToDoItem.js","ListToDo.js","App.js","index.js"],"names":["ToDoItem","props","liClassName","todo","id","description","isActive","isEdited","handleIsActiveChange","handleEditFieldChange","deleteToDo","handleItemDoubleClick","handleEditEnter","key","className","type","checked","list-id","onChange","onDoubleClick","htmlFor","onClick","value","onKeyDown","onBlur","ListToDo","todos","map","App","state","nextId","typeOfFilter","isAllButtonActive","isActiveButtonActive","isComplitedButtonActiv","isToggleAll","FieldValue","event","target","getAttribute","indexOfElement","findIndex","item","parseInt","setState","prevState","tempTodos","addNewToDo","trim","changeAddField","indexOfDeletedElement","splice","clearComplited","filter","setFilterToAll","setFilterToActive","setFilterToCompleted","handleToggleAllChange","tempItem","localStorage","getItem","initState","JSON","parse","this","setItem","stringify","filteredTodos","activeItemCount","length","placeholder","changeToDo","handleChangeToDo","href","React","Component","ReactDOM","render","document","getElementById"],"mappings":"oQA2EeA,EAvEE,SAACC,GAChB,IAAIC,EAAc,GADQ,EAEsBD,EAAME,KAA9CC,EAFkB,EAElBA,GAAIC,EAFc,EAEdA,YAAaC,EAFC,EAEDA,SAAUC,EAFT,EAESA,SAC3BC,EAIcP,EAJdO,qBACNC,EAGoBR,EAHpBQ,sBACAC,EAEoBT,EAFpBS,WACAC,EACoBV,EADpBU,sBACAC,EAAoBX,EAApBW,gBAYF,OATEV,EADEI,EACY,OAEA,YAGZC,IACFL,EAAc,WAId,wBAAIW,IAAKT,EAAIU,UAAWZ,GACtB,yBAAKY,UAAU,QACb,2BACEC,KAAK,WACLD,UAAU,SACVE,SAAUV,EACVW,UAASb,EACTA,GAAE,eAAUA,GACZc,SAAUV,IAEZ,2BACEW,cAAeR,EACfM,UAASb,EACTgB,QAAO,eAAUhB,IAEhBC,GAEH,4BACEU,KAAK,SACLD,UAAU,UACVG,UAASb,EACTiB,QAASX,KAGb,2BACEY,MAAOjB,EACPY,UAASb,EACTW,KAAK,OACLD,UAAU,OACVI,SAAUT,EACVc,UAAWX,EACXY,OAAQZ,MCZDa,EAvCE,SAACxB,GAAW,IACnByB,EAKczB,EALdyB,MACNjB,EAIoBR,EAJpBQ,sBACAC,EAGoBT,EAHpBS,WACAF,EAEoBP,EAFpBO,qBACAG,EACoBV,EADpBU,sBACAC,EAAoBX,EAApBW,gBAEF,OACE,wBAAIE,UAAU,aACXY,EAAMC,KAAI,SAAAxB,GAAI,OACb,kBAAC,EAAD,CACEA,KAAMA,EACNK,qBAAsBA,EACtBE,WAAYA,EACZC,sBAAuBA,EACvBC,gBAAiBA,EACjBH,sBAAuBA,SC0TlBmB,E,4MA3UbC,MAAQ,CACNH,MAAO,GACPI,OAAQ,EACRC,aAAc,MACdC,mBAAmB,EACnBC,sBAAsB,EACtBC,wBAAwB,EACxBC,aAAa,EACbC,WAAY,I,EAkCd5B,qBAAuB,SAAC6B,GACtB,IAAMjC,EAAKiC,EAAMC,OAAOC,aAAa,WAC/BC,EAAiB,EAAKX,MAAMH,MAAMe,WAAU,SAAAC,GAAI,OACpDA,EAAKtC,KAAOuC,SAASvC,EAAI,OAE3B,EAAKwC,UAAS,SAACC,GACb,IAAMC,EAAS,YAAOD,EAAUnB,OAIhC,OAFAoB,EAAUN,GAAgBlC,UAAYwC,EAAUN,GAAgBlC,SAG9D,CACEoB,MAAM,YAAKoB,Q,EAMnBC,WAAa,SAACV,GACM,UAAdA,EAAMxB,KAC4B,KAAjC,EAAKgB,MAAMO,WAAWY,QACzB,EAAKJ,UAAS,SAAAC,GAAS,MAAK,CAC1BnB,MAAM,GAAD,mBAAMmB,EAAUnB,OAAhB,CACH,CACErB,YAAawC,EAAUT,WACvB9B,UAAU,EACVF,GAAIyC,EAAUf,OACdvB,UAAU,KAEduB,OAAQe,EAAUf,OAAS,EAC3BM,WAAY,Q,EAKlBa,eAAiB,SAACZ,GAAW,IACnBf,EAAUe,EAAMC,OAAhBhB,MAER,EAAKsB,SAAS,CAAER,WAAYd,K,EAG9BZ,WAAa,SAAC2B,GACZ,IAAMjC,EAAKiC,EAAMC,OAAOC,aAAa,WAC/BW,EAAwB,EAC3BrB,MACAH,MACAe,WAAU,SAAAC,GAAI,OAAKA,EAAKtC,KAAOuC,SAASvC,EAAI,OAE/C,EAAKwC,UAAS,SAACC,GACb,IAAMC,EAAS,YAAOD,EAAUnB,OAIhC,OAFAoB,EAAUK,OAAOD,EAAuB,GAGtC,CACExB,MAAM,YAAKoB,Q,EAMnBM,eAAiB,WACf,EAAKR,UAAS,SAAAC,GAAS,MAAK,CAC1BnB,MAAOmB,EAAUnB,MAAM2B,QAAO,SAAAX,GAAI,OAAIA,EAAKpC,iB,EAI/CgD,eAAiB,SAACjB,GAChB,EAAKO,SAAS,CACZb,aAAc,MACdC,mBAAmB,EACnBC,sBAAsB,EACtBC,wBAAwB,K,EAK5BqB,kBAAoB,SAAClB,GACnB,EAAKO,SAAS,CACZb,aAAc,SACdC,mBAAmB,EACnBC,sBAAsB,EACtBC,wBAAwB,K,EAK5BsB,qBAAuB,SAACnB,GACtB,EAAKO,SAAS,CACZb,aAAc,YACdC,mBAAmB,EACnBC,sBAAsB,EACtBC,wBAAwB,K,EAK5BuB,sBAAwB,WACtB,EAAKb,UAAS,SAAAC,GAAS,MAAK,CAC1BV,aAAcU,EAAUV,YACxBT,MAAOmB,EAAUnB,MAAMC,KAAI,SAACe,GAC1B,IAAMgB,EAAQ,eAAQhB,GAItB,OAFAgB,EAASpD,UAAYuC,EAAUV,YAExBuB,U,EAKb/C,sBAAwB,SAAC0B,GACvB,IAAMjC,EAAKiC,EAAMC,OAAOC,aAAa,WAC/BC,EAAiB,EACpBX,MACAH,MACAe,WAAU,SAAAC,GAAI,OAAKA,EAAKtC,KAAOuC,SAASvC,EAAI,OAE/C,EAAKwC,UAAS,SAACC,GACb,IAAMC,EAAS,YAAOD,EAAUnB,OAIhC,OAFAoB,EAAUN,GAAgBjC,UAAYuC,EAAUN,GAAgBjC,SAG9D,CACEmB,MAAM,YAAKoB,Q,EAMnBlC,gBAAkB,SAACyB,GACjB,IAAkB,UAAdA,EAAMxB,KAAkC,SAAfwB,EAAMtB,OAID,KAA9BsB,EAAMC,OAAOhB,MAAM0B,OAAvB,CAIA,IAAM5C,EAAKiC,EAAMC,OAAOC,aAAa,WAC/BC,EAAiB,EACpBX,MACAH,MACAe,WAAU,SAAAC,GAAI,OAAKA,EAAKtC,KAAOuC,SAASvC,EAAI,OAE/C,EAAKwC,UAAS,SAACC,GACb,IAAMC,EAAS,YAAOD,EAAUnB,OAIhC,OAFAoB,EAAUN,GAAgBjC,UAAW,EAGnC,CACEmB,MAAM,YAAKoB,S,EAMnBrC,sBAAwB,SAAC4B,GACvB,IAAMjC,EAAKiC,EAAMC,OAAOC,aAAa,WAC/BC,EAAiB,EACpBX,MACAH,MACAe,WAAU,SAAAC,GAAI,OAAKA,EAAKtC,KAAOuC,SAASvC,EAAI,OACvCkB,EAAUe,EAAMC,OAAhBhB,MAER,EAAKsB,UAAS,SAACC,GACb,IAAMC,EAAS,YAAOD,EAAUnB,OAIhC,OAFAoB,EAAUN,GAAgBnC,YAAciB,EAGtC,CACEI,MAAM,YAAKoB,Q,kEA3MjB,GAAKa,aAAaC,QAAQ,eAA1B,CAIA,IAAMC,EAAYC,KAAKC,MAAMJ,aAAaC,QAAQ,gBAC1ClC,EAOSmC,EAPTnC,MACNI,EAMe+B,EANf/B,OACAC,EAKe8B,EALf9B,aACAC,EAIe6B,EAJf7B,kBACAC,EAGe4B,EAHf5B,qBACAC,EAEe2B,EAFf3B,uBACAC,EACe0B,EADf1B,YACAC,EAAeyB,EAAfzB,WAEF4B,KAAKpB,SAAS,CACZlB,QACAI,SACAC,eACAC,oBACAC,uBACAC,yBACAC,cACAC,kB,2CAKFuB,aAAaM,QAAQ,cAAeH,KAAKI,UAAUF,KAAKnC,U,+BAwLxD,IAAIsC,EAAa,YAAOH,KAAKnC,MAAMH,OAEH,WAA5BsC,KAAKnC,MAAME,eACboC,EAAgBH,KAAKnC,MAAMH,MAAM2B,QAAO,SAAAX,GAAI,OAAIA,EAAKpC,aAGvB,cAA5B0D,KAAKnC,MAAME,eACboC,EAAgBH,KAAKnC,MAAMH,MAAM2B,QAAO,SAAAX,GAAI,OAAKA,EAAKpC,aAGxD,IAAM8D,EAAkBJ,KACrBnC,MACAH,MACA2B,QAAO,SAAAX,GAAI,OAAIA,EAAKpC,YAAU+D,OAd1B,EAoBWL,KAAKnC,MAJfI,EAhBD,EAgBCA,qBACNG,EAjBK,EAiBLA,WACAJ,EAlBK,EAkBLA,kBACAE,EAnBK,EAmBLA,uBACAC,EApBK,EAoBLA,YAEF,OACE,6BAASrB,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCAEA,2BACEA,UAAU,WACVwD,YAAY,yBACZ/C,UAAWyC,KAAKjB,WAChB7B,SAAU8C,KAAKf,eACf3B,MAAOc,KAIX,6BAAStB,UAAU,QACjB,2BACEI,SAAU8C,KAAKP,sBACfzC,QAASmB,EACTpB,KAAK,WACLX,GAAG,aACHU,UAAU,eAEZ,2BAAOM,QAAQ,cAAf,wBACA,kBAAC,EAAD,CACEM,MAAOyC,EACPI,WAAYP,KAAKQ,iBACjB9D,WAAYsD,KAAKtD,WACjBF,qBAAsBwD,KAAKxD,qBAC3BG,sBAAuBqD,KAAKrD,sBAC5BC,gBAAiBoD,KAAKpD,gBACtBH,sBAAuBuD,KAAKvD,yBAKhC,4BAAQK,UAAU,UAChB,0BAAMA,UAAU,cACbsD,EACA,IAFH,cAMA,wBAAItD,UAAU,WACZ,4BACE,uBACE2D,KAAK,KACL3D,UAAWkB,EAAoB,WAAa,GAC5CX,QAAS2C,KAAKV,gBAHhB,QASF,4BACE,uBACEmB,KAAK,WACL3D,UAAWmB,EAAuB,WAAa,GAC/CZ,QAAS2C,KAAKT,mBAHhB,WASF,4BACE,uBACEkB,KAAK,cACL3D,UAAWoB,EAAyB,WAAa,GACjDb,QAAS2C,KAAKR,sBAHhB,eAUJ,4BACEzC,KAAK,SACLD,UAAU,kBACVO,QAAS2C,KAAKZ,gBAHhB,yB,GA/TQsB,IAAMC,WCGxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.2c147335.chunk.js","sourcesContent":["\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ToDoItem = (props) => {\n  let liClassName = '';\n  const { id, description, isActive, isEdited } = props.todo;\n  const { handleIsActiveChange,\n    handleEditFieldChange,\n    deleteToDo,\n    handleItemDoubleClick,\n    handleEditEnter } = props;\n\n  if (isActive) {\n    liClassName = 'view';\n  } else {\n    liClassName = 'completed';\n  }\n\n  if (isEdited) {\n    liClassName = 'editing';\n  }\n\n  return (\n    <li key={id} className={liClassName}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={!isActive}\n          list-id={id}\n          id={`todo-${id}`}\n          onChange={handleIsActiveChange}\n        />\n        <label\n          onDoubleClick={handleItemDoubleClick}\n          list-id={id}\n          htmlFor={`todo-${id}`}\n        >\n          {description}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          list-id={id}\n          onClick={deleteToDo}\n        />\n      </div>\n      <input\n        value={description}\n        list-id={id}\n        type=\"text\"\n        className=\"edit\"\n        onChange={handleEditFieldChange}\n        onKeyDown={handleEditEnter}\n        onBlur={handleEditEnter}\n      />\n    </li>\n  );\n};\n\nToDoItem.propTypes = {\n  todo: PropTypes.shape({\n    description: PropTypes.string.isRequired,\n    isActive: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n    isEdited: PropTypes.bool.isRequired,\n  }).isRequired,\n  handleIsActiveChange: PropTypes.func.isRequired,\n  deleteToDo: PropTypes.func.isRequired,\n  handleItemDoubleClick: PropTypes.func.isRequired,\n  handleEditEnter: PropTypes.func.isRequired,\n  handleEditFieldChange: PropTypes.func.isRequired,\n};\n\nexport default ToDoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ToDoItem from './ToDoItem';\n\nconst ListToDo = (props) => {\n  const { todos,\n    handleEditFieldChange,\n    deleteToDo,\n    handleIsActiveChange,\n    handleItemDoubleClick,\n    handleEditEnter } = props;\n\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <ToDoItem\n          todo={todo}\n          handleIsActiveChange={handleIsActiveChange}\n          deleteToDo={deleteToDo}\n          handleItemDoubleClick={handleItemDoubleClick}\n          handleEditEnter={handleEditEnter}\n          handleEditFieldChange={handleEditFieldChange}\n        />\n      ))\n      }\n    </ul>\n  );\n};\n\nListToDo.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    description: PropTypes.string.isRequired,\n    isActive: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n    isEdited: PropTypes.bool.isRequired,\n  })).isRequired,\n  handleIsActiveChange: PropTypes.func.isRequired,\n  deleteToDo: PropTypes.func.isRequired,\n  handleItemDoubleClick: PropTypes.func.isRequired,\n  handleEditEnter: PropTypes.func.isRequired,\n  handleEditFieldChange: PropTypes.func.isRequired,\n};\n\nexport default ListToDo;\n","import React from 'react';\nimport ListToDo from './ListToDo';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    nextId: 1,\n    typeOfFilter: 'all',\n    isAllButtonActive: true,\n    isActiveButtonActive: false,\n    isComplitedButtonActiv: false,\n    isToggleAll: true,\n    FieldValue: '',\n  }\n\n  componentDidMount() {\n    if (!localStorage.getItem('ToDoAppData')) {\n      return;\n    }\n\n    const initState = JSON.parse(localStorage.getItem('ToDoAppData'));\n    const { todos,\n      nextId,\n      typeOfFilter,\n      isAllButtonActive,\n      isActiveButtonActive,\n      isComplitedButtonActiv,\n      isToggleAll,\n      FieldValue } = initState;\n\n    this.setState({\n      todos,\n      nextId,\n      typeOfFilter,\n      isAllButtonActive,\n      isActiveButtonActive,\n      isComplitedButtonActiv,\n      isToggleAll,\n      FieldValue,\n    });\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('ToDoAppData', JSON.stringify(this.state));\n  }\n\n  handleIsActiveChange = (event) => {\n    const id = event.target.getAttribute('list-id');\n    const indexOfElement = this.state.todos.findIndex(item => (\n      item.id === parseInt(id, 10)));\n\n    this.setState((prevState) => {\n      const tempTodos = [...prevState.todos];\n\n      tempTodos[indexOfElement].isActive = !tempTodos[indexOfElement].isActive;\n\n      return (\n        {\n          todos: [...tempTodos],\n        }\n      );\n    });\n  }\n\n  addNewToDo = (event) => {\n    if (event.key === 'Enter'\n      && this.state.FieldValue.trim() !== '') {\n      this.setState(prevState => ({\n        todos: [...prevState.todos,\n          {\n            description: prevState.FieldValue,\n            isActive: true,\n            id: prevState.nextId,\n            isEdited: false,\n          }],\n        nextId: prevState.nextId + 1,\n        FieldValue: '',\n      }));\n    }\n  }\n\n  changeAddField = (event) => {\n    const { value } = event.target;\n\n    this.setState({ FieldValue: value });\n  }\n\n  deleteToDo = (event) => {\n    const id = event.target.getAttribute('list-id');\n    const indexOfDeletedElement = this\n      .state\n      .todos\n      .findIndex(item => (item.id === parseInt(id, 10)));\n\n    this.setState((prevState) => {\n      const tempTodos = [...prevState.todos];\n\n      tempTodos.splice(indexOfDeletedElement, 1);\n\n      return (\n        {\n          todos: [...tempTodos],\n        }\n      );\n    });\n  }\n\n  clearComplited = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(item => item.isActive),\n    }));\n  }\n\n  setFilterToAll = (event) => {\n    this.setState({\n      typeOfFilter: 'all',\n      isAllButtonActive: true,\n      isActiveButtonActive: false,\n      isComplitedButtonActiv: false,\n\n    });\n  }\n\n  setFilterToActive = (event) => {\n    this.setState({\n      typeOfFilter: 'active',\n      isAllButtonActive: false,\n      isActiveButtonActive: true,\n      isComplitedButtonActiv: false,\n\n    });\n  }\n\n  setFilterToCompleted = (event) => {\n    this.setState({\n      typeOfFilter: 'completed',\n      isAllButtonActive: false,\n      isActiveButtonActive: false,\n      isComplitedButtonActiv: true,\n\n    });\n  }\n\n  handleToggleAllChange = () => {\n    this.setState(prevState => ({\n      isToggleAll: !prevState.isToggleAll,\n      todos: prevState.todos.map((item) => {\n        const tempItem = { ...item };\n\n        tempItem.isActive = !prevState.isToggleAll;\n\n        return tempItem;\n      }),\n    }));\n  }\n\n  handleItemDoubleClick = (event) => {\n    const id = event.target.getAttribute('list-id');\n    const indexOfElement = this\n      .state\n      .todos\n      .findIndex(item => (item.id === parseInt(id, 10)));\n\n    this.setState((prevState) => {\n      const tempTodos = [...prevState.todos];\n\n      tempTodos[indexOfElement].isEdited = !tempTodos[indexOfElement].isEdited;\n\n      return (\n        {\n          todos: [...tempTodos],\n        }\n      );\n    });\n  }\n\n  handleEditEnter = (event) => {\n    if (event.key !== 'Enter' && event.type !== 'blur') {\n      return;\n    }\n\n    if (event.target.value.trim() === '') {\n      return;\n    }\n\n    const id = event.target.getAttribute('list-id');\n    const indexOfElement = this\n      .state\n      .todos\n      .findIndex(item => (item.id === parseInt(id, 10)));\n\n    this.setState((prevState) => {\n      const tempTodos = [...prevState.todos];\n\n      tempTodos[indexOfElement].isEdited = false;\n\n      return (\n        {\n          todos: [...tempTodos],\n        }\n      );\n    });\n  }\n\n  handleEditFieldChange = (event) => {\n    const id = event.target.getAttribute('list-id');\n    const indexOfElement = this\n      .state\n      .todos\n      .findIndex(item => (item.id === parseInt(id, 10)));\n    const { value } = event.target;\n\n    this.setState((prevState) => {\n      const tempTodos = [...prevState.todos];\n\n      tempTodos[indexOfElement].description = value;\n\n      return (\n        {\n          todos: [...tempTodos],\n\n        }\n      );\n    });\n  }\n\n  render() {\n    let filteredTodos = [...this.state.todos];\n\n    if (this.state.typeOfFilter === 'active') {\n      filteredTodos = this.state.todos.filter(item => item.isActive);\n    }\n\n    if (this.state.typeOfFilter === 'completed') {\n      filteredTodos = this.state.todos.filter(item => !item.isActive);\n    }\n\n    const activeItemCount = this\n      .state\n      .todos\n      .filter(item => item.isActive).length;\n\n    const { isActiveButtonActive,\n      FieldValue,\n      isAllButtonActive,\n      isComplitedButtonActiv,\n      isToggleAll } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onKeyDown={this.addNewToDo}\n            onChange={this.changeAddField}\n            value={FieldValue}\n          />\n        </header>\n\n        <section className=\"main\">\n          <input\n            onChange={this.handleToggleAllChange}\n            checked={isToggleAll}\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <ListToDo\n            todos={filteredTodos}\n            changeToDo={this.handleChangeToDo}\n            deleteToDo={this.deleteToDo}\n            handleIsActiveChange={this.handleIsActiveChange}\n            handleItemDoubleClick={this.handleItemDoubleClick}\n            handleEditEnter={this.handleEditEnter}\n            handleEditFieldChange={this.handleEditFieldChange}\n\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {activeItemCount}\n            {' '}\n            items left\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <a\n                href=\"#/\"\n                className={isAllButtonActive ? 'selected' : ''}\n                onClick={this.setFilterToAll}\n              >\n                All\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/active\"\n                className={isActiveButtonActive ? 'selected' : ''}\n                onClick={this.setFilterToActive}\n              >\n                Active\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/completed\"\n                className={isComplitedButtonActiv ? 'selected' : ''}\n                onClick={this.setFilterToCompleted}\n              >\n                Completed\n              </a>\n            </li>\n          </ul>\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clearComplited}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}